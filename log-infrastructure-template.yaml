AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  This CloudFormation template creates simple Lambda function,
  which stores lambda invocation log in s3 bucket.  


Parameters:
  BucketName:  
    Type: String 
    Default: "my-lambda-logbucket" 

  LambdaFuncName:
    Type: String
    Default: Lambda_log-api-lambda

  APIName:
    Type: String
    Default: API_log-api-lambda
  EnvironmentName:
    Type: String
    Default: Prod

  REQMethod:
    Type: String
    Default: GET


Resources:
            
  InvokeLogBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
    
  LambdaLogInvocationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaFunctionWriteToS3Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - s3:PutObject
            Resource: '*'    
 
  LambdaLogInvocationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.9
      Timeout: 5
      FunctionName:
        Ref:  LambdaFuncName
      Handler: lambda_function.lambda_handler
      Role: !GetAtt  LambdaLogInvocationFunctionRole.Arn
      CodeUri: lambda_function.py

  APIGatewayRestAPI:
   Type: 'AWS::ApiGateway::RestApi'
   Properties:
     Name:
       Ref: APIName
   DependsOn:
     - LambdaLogInvocationFunction

  APIGatewayResource:
   Type: 'AWS::ApiGateway::Resource'
   Properties:
     RestApiId: !Ref APIGatewayRestAPI
     ParentId: !GetAtt
       - APIGatewayRestAPI
       - RootResourceId
     PathPart:
       Ref: LambdaFuncName
   DependsOn:
     - APIGatewayRestAPI

  APIGatewayMethod:
   Type: 'AWS::ApiGateway::Method'
   Properties:
     RestApiId: !Ref APIGatewayRestAPI
     ResourceId: !Ref APIGatewayResource
     HttpMethod: !Ref REQMethod
     AuthorizationType: NONE
     MethodResponses:
       - StatusCode: 200
     Integration:
       Type: AWS_PROXY
       IntegrationHttpMethod: POST
       Uri: !Sub
         - >- 
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
         - LambdaFuncNameArn: !GetAtt LambdaLogInvocationFunction.Arn
   DependsOn:
     - APIGatewayResource

  APIGatewayDeployment:
   Type: 'AWS::ApiGateway::Deployment'
   Properties:
     RestApiId: !Ref APIGatewayRestAPI
     StageName:
       Ref: EnvironmentName
   DependsOn:
     - APIGatewayMethod

  APIGatewayPermission:
   Type: 'AWS::Lambda::Permission'

   Properties:
     Action: "lambda:InvokeFunction"
     FunctionName: !GetAtt LambdaLogInvocationFunction.Arn
     Principal: apigateway.amazonaws.com
     SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGatewayRestAPI}/${EnvironmentName}/${REQMethod}"
   DependsOn:
    - APIGatewayDeployment
      
Outputs:
  LambdaFunctionName:
    Value: !Ref LambdaLogInvocationFunction

  InvokeLogBucketName:
    Description: Name of the main bucket
    Value: !Ref  InvokeLogBucket

  EndPointURL:
    Value: !Sub "https://${APIGatewayRestAPI}.excute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}"
